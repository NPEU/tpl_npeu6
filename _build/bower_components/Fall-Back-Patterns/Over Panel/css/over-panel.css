/*-------------------------------------------------------------------------------------------------|
    Fall-Back Start-CSS Settings

    Fall-Back is designed for use with the basic
    [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)

    This determines a browser support base of:

    IE 9+, FF 8+, Opera 12, [Chrome 29+, Android ~4.4+]
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+


    Any double-classing (e.g. `.class.class`) is deliberate and intended to increase specifity.
    This allows any applicable Start-CSS declarations to be overidden.
    E.g. `.{pattern} .{pattern}__child` would `a[href]`, but just `.{pattern}` wouldn't, so we use
    `.{pattern}.{pattren}`

    https://coolors.co/50514f-f25f5c-ffe066-247ba0-70c1b3

|-------------------------------------------------------------------------------------------------*/
/*------------------------------------------------------------------------------------------------*\

    Designed for use with the basic [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)
    IE 9+, FF 8+, Opera 12, Chrome 29+, Android ~4.4+
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+

\*------------------------------------------------------------------------------------------------*/
/* -- Basic/fallback layout --------------------------------------------------------------------- */
/*
        1. Helps compatibiliy with Nav-Bar. No down-sides I can see. May have to revise if some
           become apparent.
    */
.over-panel {
  width: 100%;
  /* [1] */
}

/*
		This is a bit of a hack, but it's a way of letting JS know that this CSS has loaded.
		It doesn't work for Opera Mini, but I'm happy to provide this browser only with the
		unenhanced version.
        UPDATE: Due to problem with FOBP, now checking for existence of class in styesheet earlier
        on, so this isn't needed:
	*/
/*.over-panel::before {
		content: 'CSS Loaded';
        display: none;
	}*/
.js-over-panel {
  border: 0;
}

.over-panel-control {
  display: none;
}

.over-panel__contents {
  background-color: #247BA0;
  color: #fff;
  padding: 0;
}

/*
        iOS/OSX seem to apply mystery margins.
    */
.over-panel,
.over-panel__contents {
  margin: 0;
}

.over-panel__contents > * {
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

.over-panel__contents a {
  color: #dbdbdb;
}

.over-panel__contents a:hover,
.over-panel__contents a:active,
.over-panel__contents a:focus {
  color: #ededed;
}

/* -----------------------------------------------------------------------------------------------*/
/* ********************************************************************************************** */
/* -- Enhanced layout --------------------------------------------------------------------------- */
.js-over-panel .over-panel {
  width: auto;
  -webkit-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  flex: 1 0 auto;
}

.js-over-panel .over-panel__contents {
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@media only screen and (max-width: 49.9375em) {
  /*
			1. Make sure the over-panel is on top.
		*/
  .js-over-panel .over-panel {
    position: absolute;
    /* [1] */
    left: 0;
    width: 100%;
  }
  .js-over-panel-control.over-panel-control {
    display: inline-block;
  }
  /*
            This extra wrapper allows the content of the panel to be absolutely positioned so that the
            container doesn't create a positioning context which would prevent the overlay from filling
            the body.
            The :target id needs to stay in actual position so the fall-back works, so everything
            affected by the :target must come after or inside the element with the id, but we want to
            allow the position of the controls to be as flexible as possible, so some trickery is
            needed.


            1. Make the over-panel invisible in a way that's transition-able but also removes from tab
               order.
        */
  .js-over-panel .over-panel__contents {
    position: absolute;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    visibility: hidden;
    /* [1] */
    -webkit-flex-direction: column;
    -ms-flex-direction: column;
    flex-direction: column;
  }
  /*
            1. Make the over-panel visible in a way that's transition-able.
        */
  .js-over-panel_is-open .over-panel__contents {
    visibility: visible;
    /* [1] */
  }
  /* Slide effect: */
  /*.js-over-panel .over-panel--slide .over-panel__contents {
            -webkit-transform: translateY(-100%);
            -moz-transform:    translateY(-100%);
            -ms-transform:     translateY(-100%);
            -o-transform:      translateY(-100%);
            transform:         translateY(-100%);
        }

        .js-over-panel_is-animating.over-panel--slide .over-panel__contents {
            -webkit-transition: -webkit-transform $td  $tf,
                                visibility        0s   $tf  $td;
            -moz-transition:    -moz-transform    $td  $tf,
                                visibility        0s   $tf  $td;
            -o-transition:      -o-transform      $td  $tf,
                                visibility        0s   $tf  $td;
            transition:         transform         $td  $tf,
                                visibility        0s   $tf  $td;
        }

        .js-over-panel_is-open.over-panel--slide .over-panel__contents {
            -webkit-transform: translateY(0);
            -moz-transform:    translateY(0);
            -ms-transform:     translateY(0);
            -o-transform:      translateY(0);
            transform:         translateY(0);

            -webkit-transition: -webkit-transform $td  $tf;
            -moz-transition:    -moz-transform    $td  $tf;
            -o-transition:      -o-transform      $td  $tf;
            transition:         transform         $td  $tf;
        }*/
  /* Fade effect: */
  /*.js-over-panel .over-panel--fade .over-panel__contents {
            opacity: 0;
        }

        .js-over-panel_is-animating.over-panel--fade .over-panel__contents {
            -webkit-transition: opacity    $td  $tf,
                                visibility 0s   $tf  $td;
            -moz-transition:    opacity    $td  $tf,
                                visibility 0s   $tf  $td;
            -o-transition:      opacity    $td  $tf,
                                visibility 0s   $tf  $td;
            transition:         opacity    $td  $tf,
                                visibility 0s   $tf  $td;
        }

        .js-over-panel_is-open.over-panel--fade .over-panel__contents {
            opacity: 1;

            -webkit-transition: opacity $td  $tf;
            -moz-transition:    opacity $td  $tf;
            -o-transition:      opacity $td  $tf;
            transition:         opacity $td  $tf;
        }*/
  .js-over-panel .over-panel .over-panel__contents {
    opacity: 0;
  }
  .js-over-panel_is-animating.over-panel .over-panel__contents {
    -webkit-transition: opacity ease 0.8s, visibility 0s 0.8s ease;
    -moz-transition: opacity ease 0.8s, visibility 0s 0.8s ease;
    -o-transition: opacity ease 0.8s, visibility 0s 0.8s ease;
    transition: opacity ease 0.8s, visibility 0s 0.8s ease;
  }
  .js-over-panel_is-open.over-panel .over-panel__contents {
    opacity: 1;
    -webkit-transition: opacity ease 0.8s;
    -moz-transition: opacity ease 0.8s;
    -o-transition: opacity ease 0.8s;
    transition: opacity ease 0.8s;
  }
  /*
            1. These override button styles defined as part of StartCSS. I may consider making these
               customisable via more variables.
			2. Ensure the control is above the overlay.
        */
  .js-over-panel-control.over-panel-control {
    display: block;
    margin: 0;
    padding-left: 0.5625em;
    padding-right: 0.5625em;
    padding-bottom: 0;
    /* 1 */
    padding-top: 0;
    /* 1 */
    border: 0;
    border-radius: 0;
    line-height: 2.25em;
    text-decoration: none;
    outline: 0;
    box-shadow: none;
    /* 1 */
    color: #fff;
    background-color: #247BA0;
    position: relative;
    z-index: 0;
  }
  .js-over-panel-control.over-panel-control:hover,
  .js-over-panel-control.over-panel-control:active,
  .js-over-panel-control.over-panel-control:focus {
    border: 0;
  }
  /*
            1. Ensure the control is above the overlay.
        */
  .js-over-panel-control.over-panel-control[aria-expanded="true"] {
    z-index: 1;
    /* [1] */
  }
  .js-over-panel-control.over-panel-control:hover,
  .js-over-panel-control.over-panel-control:active,
  .js-over-panel-control.over-panel-control[aria-expanded="true"] {
    color: #fff;
    background-color: #174e66;
  }
  .js-over-panel-control.over-panel-control:focus {
    color: #fff;
    background-color: #1d6583;
  }
  .js-over-panel-control.over-panel-control .icon--is-open,
  .js-over-panel-control.over-panel-control[aria-expanded="true"] .icon--is-closed {
    display: none;
  }
  .js-over-panel-control.over-panel-control .icon--is-closed,
  .js-over-panel-control.over-panel-control[aria-expanded="true"] .icon--is-open {
    display: inline;
  }
  /*.over-panel__open.over-panel__open {
            display: block;
        }*/
  /*
            Fix for Opera Mini vertical centering:
        */
  /* Hide the open control: */
  /*
            Taking this out for now is leaving it visible doesn't seem to hurt (though accessibility?)
            but hiding it can cause other elements to jump around due to flexbox.
            Maybe use visibility, not sure.
        */
  /*.js-over-panel_is-open .over-panel__open.over-panel__open {
            display: none;
        }*/
  /* Show the close control and move on above the overlay: */
  /*.js-over-panel_is-open .over-panel__close.over-panel__close {
            z-index: 1002; /* @var *
            display: block;
            position: absolute;
            top: 0;
            right: 0;
        }*/
  /*
            1. This is the obvious place for this rule but there's a weird Chrome bug that means
               the postiion/dimensions are ignore if it's initiallty hidden.
               Moving to the is-open declaration fixes this, as it only gets applie when it's
               visisble.
        */
  .js-over-panel .over-panel__overlay {
    display: block;
    z-index: -1;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    border: 0;
    text-decoration: none;
    visibility: hidden;
    background: #000;
    opacity: 0;
    -webkit-transition: opacity 0.5s ease;
    -moz-transition: opacity 0.5s ease;
    -o-transition: opacity 0.5s ease;
    transition: opacity 0.5s ease;
  }
  /* Bring the overlay to the front and fade in when there's an over-panel target: */
  .js-over-panel_is-open .over-panel__overlay {
    position: fixed;
    z-index: 0;
    opacity: 0.6;
    visibility: visible;
  }
  .js-over-panel-control .over-panel__overlay:hover,
  .js-over-panel-control .over-panel__overlay:active,
  .js-over-panel-control .over-panel__overlay:focus {
    border: 0;
    text-decoration: none;
    background: #000;
  }
}

/* ---------------------------------------------------------------------------------------------- */
