@function calc-rem-from-px($px, $negative: false) {
    // e.g. $px = 16px (and $fallback--base-rem-1px = 0.0625rem)
    // 16px + 0px = 16px | 16 + 0px = 16px (add unit if necessary)
    // 16px / 1px = 16 (strip unit)
    // 16px * 0.0625rem = 1rem
    $value: ((($px + 0px) / 1px) * $fallback--base-rem-1px);

    @if $negative {
        $value: -#{$value};
    }

    @return $value;
}

@function calc-px-from-rem($rem, $negative: false) {
    // e.g. $rem = 1.5rem
    // 1.5rem  + 0rem = 1.5rem | 1.5 + 0rem = 1.5rem (add unit if necessary)
    // 1.5rem / 1rem = 1 (strip unit)
    // 1.5 * 16px = 24px
    $value: ((($rem + 0rem) / 1rem) * $fallback--root-font-size);

    @if $negative {
        $value: -#{$value};
    }

    @return $value;
}

/*
    Colour contrast from https://gist.github.com/FStop/8959422
    
    Usage:
    @if color_contrast($colour, #fff) < 2 {
        color: #333;
    }
    @else{
        color: #fff;
    }
*/
/* Awesome contrast ratio function
* via https://gist.github.com/voxpelli/6304812
**/
@function color_luminance($color) {
    // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
    // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();

    @for $i from 1 through 3 {
        $rgb: nth($rgba, $i);
        $rgb: $rgb / 255;

        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

        $rgba2: append($rgba2, $rgb);
    }

    @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

@function color_contrast($color1, $color2) {
    // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
    // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
    $luminance1: color_luminance($color1) + .05;
    $luminance2: color_luminance($color2) + .05;
    $ratio: $luminance1 / $luminance2;

    @if $luminance2 > $luminance1 {
        $ratio: 1 / $ratio;
    }

    $ratio: round($ratio * 10) / 10;

    @return $ratio;
}

@function color_light_or_dark($color) {
    $color-brightness: round((red($color) * 299) + (green($color) * 587) + (blue($color) * 114) / 1000);
    $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

    @if abs($color-brightness) < ($light-color/2) {
        //@debug #{$color} 'is dark'; 
        @return 'dark';
    }

    @else {
        //@debug #{$color} 'is light';
        @return 'light';
    }
}

// https://github.com/pentzzsolt/sass-is-int/blob/master/_is-int.scss
@function is-int($value) {
    @if type-of($value) != number {
        @warn '`#{$value}` is not a valid number!';
        @return null;
    }
    @else {
        @if round($value) == $value {
            @return true;
        }
        @else {
            @return false;
        }
    }
}