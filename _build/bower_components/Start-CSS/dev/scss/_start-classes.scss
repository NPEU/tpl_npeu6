/*! Start CSS Classes. See SCSS file for documentation. */
$custom-input-focus-shadow: 0 0 0 2px lighten($ui-color--base, 20%) !default;
/*
    Resources:
    *
*/

/*
    "Buttons" or "CTAs" that are really links should be distinguished from real buttons, so by
    default we're swapping the foreground and background colors:
*/
a[href].button,
a[href].cta {
    @include button(
        $button-background-color,
        $button-text-color,
        20,
        $button-background-color
    );

        &:hover,
        &:active,
        &:focus {
            background-color: lighten($button-background-color, 55%);
        }
}

    // 'Fake' buttons. Over qualified for clarity.
    .button[data-text][aria-hidden="true"] {
        @include button;
    }

        .button[data-text][aria-hidden="true"]::before {
            content: attr(data-text);
        }

.bordered {
    @include bordered($fallback--base-line-height, 6px);
    //@include bordered($fallback--base-rem-space-unit, $ui-border-width);
}


// Note: the 'collapsible bottom spacing' trick doesn't seem to work if there's no border.
// Affects: IE9-11
// Works if pseudo element height is 1px.
// Adding a transparent border seems to fix it, as does setting it to an inline-block.
// Not sure which is the best / most reliable approach at the moment, so leaving both in for ref.
.padded {
    //@include bordered($fallback--base-line-height, 1px);
    //border: 1px solid transparent;

    //@include bordered($fallback--base-line-height, 0);
    @include bordered($fallback--base-rem-space-unit, 0px);
    //display: inline-block;
    //width: 100%;
}


/*
    1. Prevent element increasing height of parent.
*/
b.subtitle {
    font-size: 0.8em;
    font-weight: inherit;
    font-style: normal;
    line-height: 1;  /* 1 */
}


/*
    1. Negate heading margin.
*/
p.subtitle {
    font-size: 1.5em;
    font-weight: inherit;
    margin-top: -#{$fallback--base-rem-space-unit / 2}; /* 1 */
}

/*
    1. Negate heading margin.
*/
.tagline {
    font-size: 1.14285714286em;
    margin-top: -#{$fallback--base-rem-space-unit / 2}; /* 1 */
}

/*
    1. Collapse whitespace.
    2. Prevent extra height being added.
*/
.composite {
    display: -webkit-inline-box; /* 1 */
    display: -ms-inline-flexbox; /* 1 */
    display: inline-flex; /* 1 */
    vertical-align: middle; /* 2 */
}

/*
    1. Prevent extra height being added.
*/
.composite > * {
    /*display: flex; /* 1 */
    vertical-align: top; /* 1 */
    flex: 1 1 auto;
}

/*
    IE9

    1. Make sure there are no spaces between elements in the markup as the as the whitespace won't
       collapse.

    2. Hide button.
*/
@media screen and (min-width:0\0) and (min-resolution:.001dpcm) {
    .composite {
        display: inline-block; /* 1 */
        white-space: nowrap; /* 1 */
        overflow: hidden; /* 2 */
    }

    .composite > * {
        vertical-align: top;
        display: inline-block;
    }
}

    .composite > *:not(:first-child) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        // This looks odd in Edge...
        //border-left: 0;
        // ... so try negative margin to tweak:
        //margin-left: -1px;
    }

    .composite > *:not(:last-child) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right: 0;
    }


/* CUSTOM INPUTS: RADIOS AND CHECKBOXES */

/* Hide the real inputs: */
/* (note this method is important to persist accessibility and keyboard navigation) */
.custom-input[type="checkbox"],
.custom-input[type="radio"] {
	position: absolute;
	opacity: 0;
}

/* Prepare for positioning the pseudo-elements: */
.custom-input-label {
    position: relative;
    //vertical-align: middle;
    vertical-align: top;

    /*display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
    -webkit-align-items: center;
         -ms-flex-align: center;
           align-items: center;*/

   padding-left: 1.5em;
}

@if $input-focus-shadow != false {
	.custom-input:focus + .custom-input-label::before {
		box-shadow: $custom-input-focus-shadow;
		outline: 0;
	}
}

/* Common psuedo-element styles: */
.custom-input[type="checkbox"] + .custom-input-label::before,
.custom-input[type="radio"] + .custom-input-label::before {
    display: inline-block;
    content: "";
    width: 1em;
    height: 1em;
    background: #ccc;
    border-radius: 2px;

    position: absolute;
    left: 0;
    top: 50%;

    -webkit-transform: translate(0px, -53%);
    -ms-transform: translate(0px, -53%);
    transform: translate(0px, -53%);

}

/* Make the radio elements circular: */
.custom-input[type="radio"] + .custom-input-label::before {
    border-radius: 50%;
}

/* Define the checkbox :checked state: */
.custom-input[type="checkbox"]:checked + .custom-input-label::before {
    background: $ui-color--base;
}

/* Define the checkbox 'tick': */
.custom-input[type="checkbox"]:checked + .custom-input-label::after {
    content: "";
    display: inline-block;
    width: 0.6em;
    height: 0.3em;
    border: solid #fff;
    border-width: 0 0 0.2em 0.2em;

    position: absolute;
    left: 0.22em;
    top: 50%;

    -webkit-transform: translate(0px, -80%) rotate(-50deg);
    -ms-transform: translate(0px, -80%) rotate(-50deg);
    transform: translate(0px, -80%) rotate(-50deg);
}

/* Define the radio 'dot': */
.custom-input[type="radio"]:checked + .custom-input-label::before {
    background: #fff;
    border-color: $ui-color--base;
    border-width: 0.25em;
    border-style: solid;
}

/* Adjustments for end (right) alignment: */
.custom-input--align-end[type="checkbox"] + .custom-input-label,
.custom-input--align-end[type="radio"] + .custom-input-label {
    padding-left: 0;
    padding-right: 1.5em;
}


.custom-input--align-end[type="checkbox"] + .custom-input-label::before,
.custom-input--align-end[type="radio"] + .custom-input-label::before {
    left: auto;
    right: 0;
}

.custom-input--align-end[type="checkbox"]:checked + .custom-input-label::after {
    left: auto;
    right: 0.16em;
}


@if $input-focus-outline-width != false {
    .custom-input:focus + .custom-input-label {
        outline-width: $anchor-focus-outline-width;
        outline-style: $anchor-focus-outline-style;
        outline-color: $anchor-focus-outline-color;
        outline-offset: $anchor-focus-outline-offset;
    }
}



/* CUSTOM INPUTS: FILE */
.custom-input[type="file"] {
}

    /* -webkit hide the button: */
    .custom-input[type="file"]::-webkit-file-upload-button {
        border: 0;
        padding: 0;
        margin: 0 ;
        width: 0;
        background: transparent;
    }

    /* Firefox hide the button: */
    @supports (-moz-appearance:meterbar) {
        .custom-input[type=file] {
            text-indent: -5.6em;
            padding-right: 0.375rem;
        }
    }

    /* IE10-11, Edge hide the button: */
    .custom-input[type=file]::-ms-browse {
        padding: 0;
        margin: -1px;
        width: 0;
        border: 0;
        background: transparent;
    }

    /* IE9 hide the button: (https://jeffclayton.wordpress.com/2014/07/22/internet-explorer-css-hacks-collection/) */
    @media screen and (min-width:0\0) and (min-resolution:.001dpcm) {
        /*
            So far I haven't managed to get this arrangment working properly in IE9, so hiding it:
        */
        .button + .custom-input[type=file] {
            margin-left: -5.35em;
        }

        .custom-input[type="file"] + .button {
            min-width: 7em;
            margin-left: -7em;
            text-align: center;
        }
    }


.poem {
    font-family: cursive;
    background: #fff;
    overflow: auto;
    margin-bottom: $fallback--base-rem-space-unit;
}