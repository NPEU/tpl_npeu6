/*
    Distribute items inside a container.

*/
$distribute-namespace: l- !default;


$distribute-spacing-unit: 2rem !default;
$distribute-spacing-unit--s: ($distribute-spacing-unit / 2) !default;
$distribute-spacing-unit--l: ($distribute-spacing-unit * 2) !default;

$distribute-bases: (
    15,
    20,
    25,
    30,
    35
) !default;

/*
    IE11 needs this wrapper to behave properly.
    If you're not supporting IE11, you don't this this CSS or the HTML that goes with it.
*
.#{$distribute-namespace}distribute-wrap {
    display: -ms-flexbox;
    display: flex;

    width: 100%;

    & > .#{$distribute-namespace}distribute {
        -webkit-flex-basis: 100%;
        -ms-flex-preferred-size: 100%;
        flex-basis: 100%;
    }
}
*/

/*
    1. This is a hack for IE11, otherwise the container goes as wide as the children in a row.
*/
.#{$distribute-namespace}distribute {
    &#{&} {
        margin: 0;
        padding: 0;
        list-style-type: none;

        display: flex;

        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: stretch;

        --s: 0;

        width: 0; /* [1] */
        min-width: 100%; /* [1] */
    }

    & > * {
        flex: 0 1 auto;

        margin: 0;
        padding: 0;
    }

    &#{&}--start {
        justify-content: flex-start;
    }

    &#{&}--end {
        justify-content: flex-end;
    }


    &#{&}--limit-10 > * {
        -webkit-flex-basis: 10em;
                flex-basis: 7.5em;
                 max-width: 10em;
    }

    &#{&}--limit-15 > *  {
        -webkit-flex-basis: 15em;
                flex-basis: 11.25em;
                 max-width: 15em;
    }

    &#{&}--limit-20 > *  {
        -webkit-flex-basis: 20em;
                flex-basis: 15em;
                 max-width: 20em;
    }

    &#{&}--limit-25 > *  {
        -webkit-flex-basis: 25em;
                flex-basis: 18.75em;
                 max-width: 25em;
    }

    &#{&}--limit-30 > *  {
        -webkit-flex-basis: 30em;
                flex-basis: 22.5em;
                 max-width: 30em;
    }

    &#{&}--limit-35 > *  {
        -webkit-flex-basis: 35em;
                flex-basis: 26.25em;
                 max-width: 35em;
    }

    &#{&}--limit-40 > *  {
        -webkit-flex-basis: 40em;
                flex-basis: 30em;
                 max-width: 40em;
    }


    // Add gutters:

    &#{&}--gutter--s,
    &#{&}--gutter--s > * {
        padding: $distribute-spacing-unit--s / 2;
        --s: #{$distribute-spacing-unit--s};
    }

    &#{&}--gutter,
    &#{&}--gutter > *,
    &#{&}--gutter--m,
    &#{&}--gutter--m > * {
        padding: $distribute-spacing-unit / 2;
        --s: #{$distribute-spacing-unit};
    }


    &#{&}--gutter--l,
    &#{&}--gutter--l > * {
        padding: $distribute-spacing-unit--l / 2;
        --s: #{$distribute-spacing-unit--l};
    }


    // Add these classes to a wrapper if you want to flush the edge gutters:
    @at-root {
        /*
            1. This is a hack for IE11, otherwise the container goes as wide as the children in a
               row.
            2. Note we ONLY want this on the outermost container, so we need to turn off this hack
               for the main distribute container.
        */
        #{&}--flush-edge-gutters {
            overflow: hidden;
            flex-basis: 100%;

            width: 0; /* [1] */
            min-width: 100%; /* [1] */
        }

            #{&}--flush-edge-gutters > #{&} {
                width: auto; /* [2] */
                min-width: none; /* [2] */
            }

            #{&}--flush-edge-gutters &#{&}--gutter--s {
                margin: -$distribute-spacing-unit--s;
            }

            #{&}--flush-edge-gutters &#{&}--gutter,
            #{&}--flush-edge-gutters &#{&}--gutter--m {
                margin: -$distribute-spacing-unit;
            }

            #{&}--flush-edge-gutters &#{&}--gutter--l {
                margin: -$distribute-spacing-unit--l;
            }
    }


    // Bottom-heavy balancing:
    &#{&}--balance-bottom > * {
        flex-grow: 1;
    }

    // Item bases:
    @each $distribute-basis in $distribute-bases {
        &#{&}--basis-#{$distribute-basis} > * {
            flex-basis: #{$distribute-basis}rem;
            --b: #{$distribute-basis}rem;
        }
    }





}

// Top-heavy balancing:

// ALl browsers that support min/max also support custom properties.
// BP1 (BreakPoint1) should be calculated based on the min width of each item in a row up to the
// max items per row.
// So for example having bp1=60rem works for 2up, (2x30rem) but that BP would make 3up items 20rem
// wide which may to too narrow.
// UGH 2 should be able to fit side-by-side SOONER than 3. But maybe I can't do the balancing?

// For even as few as 3 items there's a choice in how it should be displayed / behave:
// Column | 1,2 | 3 OR just Column | 3. (no intermediary)
// OR Column | 1,2 (no single row)
@supports (width: unquote("max(1px, 1px)")) {
    .#{$distribute-namespace}distribute {

        // One spacing unit should be the gutter.
        // 2-up = 1 gutter (if flushed) or 3 gutters.
        // 3-up = 2 gutters (if flushed) or 4 gutters.
        // ...

        &#{&}--balance-top {
            //--sp: #{$distribute-spacing-unit / 2};

            --bp1: 90rem;
            --bp1-2: 110rem;
            --bp2: 130em;
        }


        /* 1 or more: */
        &#{&}--balance-top > * {
            flex-basis: 100%;
            flex-grow: 1;
        }



        /* 2 or more: */
        &#{&}--balance-top > :nth-last-child(n+2),
        &#{&}--balance-top > :nth-last-child(n+2) ~ * {
            //flex-basis: unquote("max(50%, (var(--bp1) - 100%) * 999)");
            flex-basis: unquote("max(50%, ((var(--b) * 2) - 100%) * 999)");
        }



        /* 3 or more: - note this should be part of col-to-row*/
        /*&#{&}--balance-top > :nth-last-child(n+3),
        &#{&}--balance-top > :nth-last-child(n+3) ~ * {
            //flex-basis: unquote("max(33%, (var(--bp1) - 100%) * 999)");
            flex-basis: unquote("max(33%, ((var(--b) * 3) - 100%) * 999)");
        }*/

        /* 3 or more: */
        &#{&}--balance-top > :nth-last-child(n+3),
        &#{&}--balance-top > :nth-last-child(n+3) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999))");
        }

        /* 3 or more, different values for the first one: */
        &#{&}--balance-top > :nth-last-child(n+3) {
            flex-basis: unquote("max(33%, ((var(--b) * 3) - 100%) * 999)");
        }



        /* 4 or more: */
        &#{&}--balance-top > :nth-last-child(n+4),
        &#{&}--balance-top > :nth-last-child(n+4) ~ * {
            //flex-basis: unquote("min(max(50%, (var(--bp1) - 100%) * 999), max(25%, (var(--bp2) - 100%) * 999))");
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999))");
        }



        /*
        From here on in there are increasingly more possibilities on how things can be laid out.
        More items = more possibilities. I've tried to go for what I consider to be the most balanced option but almost all other possibilities are achievable.
        */



        /* 5 or more: */
        &#{&}--balance-top > :nth-last-child(n+5),
        &#{&}--balance-top > :nth-last-child(n+5) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");
        }

        /* 5 or more, different values for the first two: */
        &#{&}--balance-top > :nth-last-child(n+5),
        &#{&}--balance-top > :nth-last-child(n+5) + * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");
        }

        /* 5 or more, different values for the first one: */
        &#{&}--balance-top > :nth-last-child(n+5) {
            flex-basis: unquote("min(max(50%, ((var(--b) * 3) - 100%) * 999), max(100%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");
        }



        /* 6 or more: */
        &#{&}--balance-top > :nth-last-child(n+6),
        &#{&}--balance-top > :nth-last-child(n+6) ~ * {
            //flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");
        }

        // The idea of the following is to follow what happens on the 'balance-bottom' version
        // (inverted), in that when there's room for 4up, the first two are 50%, and when there's
        // room for 5, the first 1 is 100%,
        // BUT, I can't figure out the math to allow for this, because `min()` will choose the 33%
        // basis instead of the 4up 50% basis, because it must calculate as smaller.
        // So, I'm having to break the pattern here stick to the these changes:
        // 1x6, 2x3, 3x2, 6x1 (unless a solution comes to me)

        /* 6 or more, different values for the first two: */
        /*&#{&}--balance-top > :nth-last-child(n+6),
        &#{&}--balance-top > :nth-last-child(n+6) + * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(50%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");
        }*/

        /* 6 or more, different values for the first one: */
        /*&#{&}--balance-top > :nth-last-child(n+6) {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(50%, ((var(--b) * 4) - 100%) * 999), max(100%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");
        }*/


        /*
            It's worth noting here that things get especially tricky and messy. We've already seen
            with 6 we've had to skip some steps, and things like 7 and 11 are quite hard too.
            Also with ANY amount, the practicalities of allowing all arrangements up to a single
            row become limiting.
            If you assume you have items that are quite small - and can therefore fit into a single
            row - a small reduction in available width that causes wrapping would leave a very large
            item on it's own row. This is the whole reason we want to balance things in the first
            place, so that this doesn't happen - we want a reduction in available width that causes
            wrapping to lead to MORE items being wrapped and thus creating a better balance.
            It's just very hard to know where things SHOULD land.

        */


        /* 7 or more: (1x7 | 1,2x3 | 1,3x2 | 3,4) */
        &#{&}--balance-top > :nth-last-child(n+7),
        &#{&}--balance-top > :nth-last-child(n+7) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");
        }

        /* 7 or more, different values for the second and third: */
        &#{&}--balance-top > :nth-last-child(n+7) + *,
        &#{&}--balance-top > :nth-last-child(n+7) + * + * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");
        }

        /* 7 or more, different values for the first one: */
        &#{&}--balance-top > :nth-last-child(n+7) {
            flex-basis: unquote("min(max(33%, ((var(--b) * 4) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");
        }



        /* 8 or more: */
        &#{&}--balance-top > :nth-last-child(n+8),
        &#{&}--balance-top > :nth-last-child(n+8) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(12%, ((var(--b) * 8) - 100%) * 999))");
        }



        /* 9 or more: */
        &#{&}--balance-top > :nth-last-child(n+9),
        &#{&}--balance-top > :nth-last-child(n+9) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(11%, ((var(--b) * 9) - 100%) * 999))");
        }

        /* 9 or more, different values for the first one: */
        &#{&}--balance-top > :nth-last-child(n+9) {
            flex-basis: unquote("min(max(33%, ((var(--b) * 3) - 100%) * 999), max(11%, ((var(--b) * 9) - 100%) * 999))");
        }



        /* 10 or more: */
        &#{&}--balance-top > :nth-last-child(n+10),
        &#{&}--balance-top > :nth-last-child(n+10) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2)- 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(10%, ((var(--b) * 10) - 100%) * 999))");
        }



        /* 11 or more: */
        &#{&}--balance-top > :nth-last-child(n+11),
        &#{&}--balance-top > :nth-last-child(n+11) ~ * {
            //flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");
        }

        /* 11 or more, different values for the second one: */
        &#{&}--balance-top > :nth-last-child(n+11) + * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");
        }

        /* 11 or more, different values for the first one: */
        &#{&}--balance-top > :nth-last-child(n+11) {
            flex-basis: unquote("min(max(50%, ((var(--b) * 3) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");
        }

        /* 11 or more, different values for the next 3 ...: */
        /*&#{&}--balance-top > :nth-last-child(n+11) ~ :nth-child(5),
        &#{&}--balance-top > :nth-last-child(n+11) ~ :nth-child(5) ~ * {
            flex-basis: unquote("max(33%, (var(--bp2) - 100%) * 999)");
        }
*/
        /* 11 or more, different values for the last 4 ...: */
        /*&#{&}--balance-top > :nth-last-child(n+11) ~ :nth-child(7),
        &#{&}--balance-top > :nth-last-child(n+11) ~ :nth-child(7) ~ * {
            flex-basis: unquote("max(25%, (var(--bp2) - 100%) * 999)");
        }*/


        /* 12 or more: double class to boost specificity - ugh.*/
        &#{&}#{&}--balance-top > :nth-last-child(n+12),
        &#{&}#{&}--balance-top > :nth-last-child(n+12) ~ * {
            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999), max(8%, ((var(--b) * 12) - 100%) * 999))");
        }
    }
}
